{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Image Segmentation",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [
        "7gK3nG-cSprv",
        "D5pnY7NrSprw",
        "YpnDxZ49SpsB"
      ]
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "metadata": {
        "colab_type": "text",
        "id": "7je53AV_Spq9"
      },
      "cell_type": "markdown",
      "source": [
        "[![colab-logo](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/japan-medical-ai/medical-ai-course-materials/blob/master/notebooks/Image_Segmentation.ipynb)\n",
        "\n",
        "# 実践編: MRI画像のセグメンテーション\n",
        "\n",
        "画像を対象とした深層学習の応用技術には様々なものがあります．例えば，画像の中の個別の物体の周りを矩形で囲むようにして検出する**物体検出**や，画像内で個別物体が占める領域を認識する**画像セグメンテーション**などがあります．\n",
        "\n",
        "**物体検出**は，対象物体の**「種類」と「位置」を認識する技術**であるといえます．\n",
        "\n",
        "![物体検出の例](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/FasterRCNN-result.png)\n",
        "（上図：物体検出の例．矩形で対象物体を囲い，そのクラスを答えるタスク．元画像はPascal VOCデータセットより．これにChainerCVによるFaster R-CNN（両者とも後述）を適用した結果．）\n",
        "\n",
        "**画像セグメンテーション**には2種類あります．1つは，個別の物体を区別するInstance-aware Segmentationです．もう一つは，同一クラスの物体であれば個を区別しないSemantic Segmentationです．今回は，後者を扱います．\n",
        "\n",
        "![セグメンテーションの例](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/PSPNet-result.png)\n",
        "（上図：Semantic Segmentationの例．ピクセル単位でクラス分類を行うタスク．画像を，予め決められた数の色で塗り絵をするようなイメージ．図はCityscapesデータセットを用いて学習したあるセグメンテーションモデルの出力結果例．）\n",
        "\n",
        "画像セグメンテーションは，4章で扱った画像全体に対して一つのクラスを割り当てる分類問題とは異なり，画像内の全ピクセルを，ピクセルごとに分類していきます．そのため，Pixel labeling タスクとも呼ばれます．これは，対象物体の**「種類」と「位置」と「形」を認識する技術**であるといえるでしょう．\n",
        "\n",
        "今回は，深層学習フレームワークChainerを用いて，このSemantic Segmentationタスクに取り組んでみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "hvW0-s0mSpq-"
      },
      "cell_type": "markdown",
      "source": [
        "## 環境構築\n",
        "\n",
        "ここで用いるライブラリは，\n",
        "\n",
        "- Chainer\n",
        "- CuPy\n",
        "- ChainerCV\n",
        "- matplotlib\n",
        "\n",
        "です．Google Colab上では，以下のようにしてインストールすることができます．以下のセルを実行してください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "QbU-na_HWMpR",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!curl https://colab.chainer.org/install | sh -  # ChainerとCuPyのインストール\n",
        "!pip install chainercv matplotlib               # ChainerCVとmatplotlibのインストール"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "xQivMLFwXta7"
      },
      "cell_type": "markdown",
      "source": [
        "インストールが完了したら，以下のセルを実行して，各ライブラリのバージョンなどを確認します．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "4dJCchkmSpq-",
        "outputId": "b7f8ba22-d434-4f4c-a0e0-e3edbb4458c3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        }
      },
      "cell_type": "code",
      "source": [
        "import chainer\n",
        "import cupy\n",
        "import chainercv\n",
        "import matplotlib\n",
        "\n",
        "chainer.print_runtime_info()\n",
        "print('ChainerCV:', chainercv.__version__)\n",
        "print('matplotlib:', matplotlib.__version__)"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Platform: Linux-4.14.65+-x86_64-with-Ubuntu-18.04-bionic\n",
            "Chainer: 5.0.0\n",
            "NumPy: 1.14.6\n",
            "CuPy:\n",
            "  CuPy Version          : 5.0.0\n",
            "  CUDA Root             : /usr/local/cuda\n",
            "  CUDA Build Version    : 9020\n",
            "  CUDA Driver Version   : 9020\n",
            "  CUDA Runtime Version  : 9020\n",
            "  cuDNN Build Version   : 7201\n",
            "  cuDNN Version         : 7201\n",
            "  NCCL Build Version    : 2213\n",
            "iDeep: 2.0.0.post3\n",
            "ChainerCV: 0.11.0\n",
            "matplotlib: 2.1.2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "N6-p0PhOSprA"
      },
      "cell_type": "markdown",
      "source": [
        "## Semantic Segmentationについて\n",
        "\n",
        "Semantic Segmentationは，Computer Visionの分野で現在も活発に研究が行われているタスクの一つで，入力画像の画素ひとつひとつに対して，なんらかのクラスを与えていくという問題です．しかし，**人間ですら，あるピクセルひとつだけを見てそれが何かを推測するのは不可能です**．そのため，いかにして**周囲のピクセルの情報を加味**しながら，ひとつひとつのピクセルの分類を行うか，が重要となります．\n",
        "\n",
        "ニューラルネットワークを用いてこの問題を解く場合は，**「画像を入力して，画像を出力するネットワーク」**を作って学習することになります．そのため，入力画像とペアになる正解ラベル画像は，同じ大きさを持つ，各ピクセルの所属クラス番号が入ったシングルチャンネルの画像とすることが一般的です．\n",
        "\n",
        "ネットワークの出力は，$C$クラス分類をする場合は$C$チャンネルの画像になります．それを各ピクセルごとにチャンネル方向にSoftmax関数を適用して確率ベクトルにし，正解のクラスの値が大きくなるよう（高い確信をもって正解クラスを予測できるよう）にすることで学習を行います．画像分類（Classification）の際の目的関数の計算を，**ピクセルごとに行っている**と考えることもできます．そして，ピクセルごとの分類誤差を，画像サイズ分だけ足し合わせたものが最小化の対象となります．\n",
        "\n",
        "ここで，$C=2$の場合だけは，ネットワークの出力を$1$チャンネルにし，損失関数をSigmoid Cross Entropyとすることもあります．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "brsImW2ySprB"
      },
      "cell_type": "markdown",
      "source": [
        "## 使用するデータセット\n",
        "\n",
        "これから使用するデータセットは，心臓MRI画像（短軸像）と，それに専門家がラベルを付けたものです．データについて詳しくはこちらをご参照ください[1, 2, 3]．\n",
        "\n",
        "[1] Sunnybrook cardiac images from earlier competition http://smial.sri.utoronto.ca/LV_Challenge/Data.html\n",
        "\n",
        "[2] 「This \"Sunnybrook Cardiac MR Database\" is made available under the CC0 1.0 Universal license described above, and with more detail here: http://creativecommons.org/publicdomain/zero/1.0/」\n",
        "\n",
        "[3] Attribution:\n",
        "Radau P, Lu Y, Connelly K, Paul G, Dick AJ, Wright GA. \"Evaluation Framework for Algorithms Segmenting Short Axis Cardiac MRI.\" The MIDAS Journal -Cardiac MR Left Ventricle Segmentation Challenge, http://hdl.handle.net/10380/3070\n",
        "\n",
        "まずは，データをダウンロードします．これは配布元のデータセットを今回用いやすいように加工し終えたものです．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "BMtGEZWIY0EW",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!if [ ! -d train ]; then curl -L -O https://github.com/mitmul/chainer-handson/releases/download/SegmentationDataset/train.zip && unzip train.zip && rm -rf train.zip; fi\n",
        "!if [ ! -d val ]; then curl -L -O https://github.com/mitmul/chainer-handson/releases/download/SegmentationDataset/val.zip && unzip val.zip && rm -rf val.zip; fi"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "xS_kqoC1m2KW"
      },
      "cell_type": "markdown",
      "source": [
        "次に，このデータセットから抜き出した画像ペアの例を示します．下のセルを実行してみてください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "fYrsnyUNSprC",
        "outputId": "971e2a59-8c26-4b02-e323-a0d89a927a1d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "from PIL import Image\n",
        "\n",
        "# PILライブラリで画像を読み込む\n",
        "img = np.asarray(Image.open('train/image/000.png'))\n",
        "label = np.asarray(Image.open('train/label/000.png'))\n",
        "\n",
        "# matplotlibライブラリを使って2つの画像を並べて表示\n",
        "fig, axes = plt.subplots(1, 2)\n",
        "axes[0].set_axis_off()\n",
        "axes[0].imshow(img, cmap='gray')\n",
        "axes[1].set_axis_off()\n",
        "axes[1].imshow(label, cmap='gray')\n",
        "plt.show()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f5d01467fd0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "GGUIUVdmSprE"
      },
      "cell_type": "markdown",
      "source": [
        "左側がMRI画像，右側がそれに対し専門家が作成した左心室の部分をマスクした画像となっています．右側のマスク画像のうち，**白く塗りつぶされている領域が，今回見つけ出したい左心室の領域となっています**．左心室の大きさは，画像ごとに異なっており，形もまた様々です．ただし，**画像全体に対して左心室が占める領域は比較的小さい**ということは共通しています．\n",
        "\n",
        "今回は，MRI画像データを，提供元が配布している形式（DICOM形式）から扱いやすいよう一般的な画像フォーマット（PNG）に変換して用いますが，そのための作業については説明しません．もし今回用いるMRI画像群のデータ整形の方法について興味をお持ちの方は，以前行われたKaggleのコンペティションに関連して提供されているこちらのチュートリアルをご参照ください：[Kaggle competition: Second Annual Data Science Bowl](https://www.kaggle.com/c/second-annual-data-science-bowl/details/deep-learning-tutorial) [7]）\n",
        "\n",
        "今回用いるデータセットの元となったデータは，医療画像では一般的な画像フォーマットである [DICOM](https://en.wikipedia.org/wiki/DICOM) 形式で配布されており，画像サイズは 256 x 256 のグレースケール画像になっています．今回は，これをあらかじめPNG画像に変換してあります．ラベル画像は，同じ大きさの二値画像となっており，**左心室の領域内部のピクセルは画素値として1を持ち，それ以外のピクセルは0で埋められています**．今回用いる学習用データセットは234枚の画像ペア（グレースケールのMRI画像と，対応する二値のラベル画像のペア）からなり．検証用データは，26枚の画像からなります．検証用データは学習用データとは別に用意されたものです．\n",
        "\n",
        "[7] https://www.kaggle.com/c/second-annual-data-science-bowl/details/deep-learning-tutorial"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "rvpjNb9uSprG"
      },
      "cell_type": "markdown",
      "source": [
        "### Chainerを用いた学習の流れ\n",
        "\n",
        "今回は，4章で扱ったChainerを使ってSemantic Segmentationに取り組みます．画像から画像を出力するネットワークを記述します．\n",
        "4章でも述べたように，Chainerには，学習ループ抽象化のためのクラスである`Trainer`が用意されています．これを用いて，左心房であるかそれ以外かの2クラスにすべてのピクセルを分類するSemantic Segmentationタスクに取り組みます．`Trainer`を使って学習を行う際にユーザがする必要がある準備について再度復習しましょう．\n",
        "\n",
        "1. Datasetオブジェクトの準備（学習に使うデータを一つ一つ返す）\n",
        "2. DatasetオブジェクトをIteratorにくるむ（Dataset内のデータをバッチサイズ分束ねて返す）\n",
        "3. モデルの定義（学習対象になるニューラルネットワーク．`chainer.Chain`クラスを継承して書く）\n",
        "4. 最適化手法の選択（`chainer.optimizers`以下にある最適化手法から選ぶ）\n",
        "5. `Updater`オブジェクトの準備（`Iterator`と`Optimizer`をとり，実際の学習部分（パラメータアップデート）を行うもの）\n",
        "6. `Trainer`オブジェクトの作成（学習ループの管理）\n",
        "\n",
        "`Trainer`に含まれるコンポーネントは，以下のような関係になっています．\n",
        "\n",
        "![Trainer関連のコンポーネント間の関係](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/trainer.png)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "8MwXJDwvSprG"
      },
      "cell_type": "markdown",
      "source": [
        "- `Updater`は，`Iterator`から`Dataset`にあるデータを指定したバッチサイズ数だけ取り出し，`Model`に与えて目的関数の値を計算し，`Optimizer`によってパラメータを更新する，という一連の作業（これが1 iterationになります）を隠蔽しています．\n",
        "- `Trainer`は`Extension`という拡張機能を使うことができ，指定したタイミング（毎iterationや，毎epoch）でログを取る，目的関数の値や精度のプロットを描画して保存，などを自動的に行うことができます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "v_Fv_HaoSprH"
      },
      "cell_type": "markdown",
      "source": [
        "Chainerを用いてネットワークの学習を記述する場合は，上の図の**内側から順に定義していき**，最後にすべてを持った`Trainer`オブジェクトを作成し，`trainer.run()`のようにして学習を開始することになります．\n",
        "\n",
        "（`Trainer`を使わず，自分で学習ループを記述することもできますが，今回は`Trainer`を使用することを前提とします．自分で学習ループを記述する方法を知りたい場合は4章を参照してください）"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "-5yuQ_VBSprI"
      },
      "cell_type": "markdown",
      "source": [
        "## 全結合型ニューラルネットワークによるセグメンテーション\n",
        "\n",
        "まずは単純なモデルから学習を開始します．全結合層3つからなるニューラルネットワークを使って，MRI画像を入力にとり，左心室らしさのグレースケール画像を出力するモデルを学習しましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "FScZCHDrSprJ"
      },
      "cell_type": "markdown",
      "source": [
        "### データセットの準備\n",
        "\n",
        "まずはデータセットの準備をします．Chainerにはいくつかの便利なデータセットまわりのクラスが用意されています．`ImageDataset`は，画像ファイルへのファイルパスのリストを渡して初期化してやると，そのパスにある画像を**学習時に**ディスクから読み込み，それを返してくれるようなデータセットクラスです．`TupleDataset`は，複数のデータセットオブジェクトを渡して初期化すると，それらから同じインデックスを持つデータをタプルに束ねて返してくれるようなデータセットオブジェクトを作成するクラスです．（Pythonの`zip`と同様です．）\n",
        "\n",
        "今回はSemantic Segmentationなので，入力も出力も画像です．なので，2つの`ImageDataset`オブジェクトを作成します．以下のセルを実行してください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "wL7MAXtNSprK",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import glob\n",
        "from chainer import datasets\n",
        "\n",
        "def create_dataset(img_filenames, label_filenames):\n",
        "    img = datasets.ImageDataset(img_filenames)\n",
        "    img = datasets.TransformDataset(img, lambda x: x / 255.)  # 0-1に正規化\n",
        "    label = datasets.ImageDataset(label_filenames, dtype=np.int32)\n",
        "    dataset = datasets.TupleDataset(img, label)\n",
        "    return dataset"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Xucn9Z1LSprN"
      },
      "cell_type": "markdown",
      "source": [
        "上の関数は，入力画像のファイルパスのリスト`img_filenames`と，正解ラベル画像（0 or 1の画素値を持つ二値画像）のファイルパスのリスト`label_filenames`を与えて，2つのデータセットオブジェクトを`TupleDataset`で束ねて返すものになっています．\n",
        "\n",
        "`img`は入力画像のデータセットですが，まるで入力画像が入ったリストのように振る舞い，`img[i]`は`i`番目の画像を返します（`[i]`でアクセスしたときに初めてディスクから画像が読み込まれます）．\n",
        "\n",
        "`label`も同様に，ラベル画像のリストのように振る舞います．これらを`TupleDataset`で束ねて作った`dataset`は，`dataset[i]`でアクセスすると`(img[i], label[i])`というタプル（値の２つ以上の集まり）を返すものになります．（これは`img`と`label`が同じ長さのリストの場合，`zip(img, label)`の結果と同じです．）\n",
        "\n",
        "次に，この関数内の2行目において，`ImageDataset`で作った入力データセットを元に`TransformDataset`という新しいデータセットを作っています．`TransformDataset`は，第1引数に与えられたデータセットにアクセスする際に**第2引数に与えた関数を適用してから返す**ようにできるクラスで，任意の関数を与えてデータを変換させる処理をはさむことができます．ここでは，変換を行う関数を`lambda`関数を使って与え，単純に値域を$[0, 1]$に変換するだけの処理を行っています．この他，例えば内部で乱数によって様々な変換（画像の場合，ランダムに左右反転を行ったり，ランダムな角度で回転をしたり，などがよく行われます）を施す関数を引数として渡すことでData augmentationを簡単に実装することができます．\n",
        "\n",
        "この`create_dataset`関数を使って学習用・検証用それぞれのデータセットオブジェクトを作成しましょう．下のセルを実行してください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "gLwVX846SprN",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def create_datasets():\n",
        "    # Python標準のglobを使ってMRI画像ファイル名/ラベル画像ファイル名の一覧を取得\n",
        "    train_img_filenames = sorted(glob.glob('train/image/*.png'))\n",
        "    train_label_filenames = sorted(glob.glob('train/label/*.png'))\n",
        "\n",
        "    # リストを渡して，データセットオブジェクト train を作成\n",
        "    train = create_dataset(train_img_filenames, train_label_filenames)\n",
        "\n",
        "    # 同様のことをvalidationデータに対しても行う\n",
        "    val_img_filenames = sorted(glob.glob('val/image/*.png'))\n",
        "    val_label_filenames = sorted(glob.glob('val/label/*.png'))\n",
        "    val = create_dataset(val_img_filenames, val_label_filenames)\n",
        "    \n",
        "    return train, val"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "7fMFbheJSprR"
      },
      "cell_type": "markdown",
      "source": [
        "この関数`create_dataset()`では，まずPython標準に備わっている`glob`を使って，`.png`の拡張子を持つ画像ファイルを指定したディレクトリ以下から探してきて，ファイルパスが格納されたリストを作ります．次に，入力画像とラベル画像のファイルリストが同じインデックスで対応したデータをそれぞれ指すように，`sorted`を使ってファイル名をソートしています（`glob`関数で列挙されるファイルリストは必ずしもソートされているとは限りません）．そのあと，それらのファイル名リストを先程の`create_dataset`関数に渡して，データセットオブジェクトを作成しています．同様のことを検証用の画像ファイルに対しても行い，`train`と`val`2つのデータセットオブジェクトを作成して返します．\n",
        "\n",
        "ではこの関数を呼んでみましょう．下のセルを実行してください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "L44uqOHXSprR",
        "outputId": "4e5a6957-775d-408b-9874-60e13d75f465",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        }
      },
      "cell_type": "code",
      "source": [
        "train, val = create_datasets()\n",
        "\n",
        "print('Dataset size:\\n\\ttrain:\\t{}\\n\\tvalid:\\t{}'.format(len(train), len(val)))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Dataset size:\n",
            "\ttrain:\t234\n",
            "\tvalid:\t26\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "p8d5DHntSprU"
      },
      "cell_type": "markdown",
      "source": [
        "この関数を呼べば，訓練用データセットオブジェクトと検証用データセットオブジェクトを作成できます．データセットオブジェクトは基本的にはリストとして扱うことができるます．例えば組み込み関数の`len()`を使っていくつのデータが含まれているかを知ることができます．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "EawmNqfnSprU"
      },
      "cell_type": "markdown",
      "source": [
        "### モデルの定義\n",
        "\n",
        "次に，訓練するモデルの定義です．ここでは4章でも扱った全結合型ニューラルネットワークを使います．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "2tO-E0NGSprW",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import chainer\n",
        "import chainer.functions as F\n",
        "import chainer.links as L\n",
        "\n",
        "class MultiLayerPerceptron(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, out_h, out_w):\n",
        "        super().__init__()\n",
        "        with self.init_scope():\n",
        "            self.l1 = L.Linear(None, 100)\n",
        "            self.l2 = L.Linear(100, 100)\n",
        "            self.l3 = L.Linear(100, out_h * out_w)\n",
        "        self.out_h = out_h\n",
        "        self.out_w = out_w\n",
        "    \n",
        "    def forward(self, x):\n",
        "        h = F.relu(self.l1(x))\n",
        "        h = F.relu(self.l2(h))\n",
        "        h = self.l3(h)\n",
        "        n = x.shape[0]\n",
        "        \n",
        "        return h.reshape((n, 1, self.out_h, self.out_w))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "aYdKpLRHSprY"
      },
      "cell_type": "markdown",
      "source": [
        "ここでは3つの全結合層を使い，活性化関数にReLUを用いる形で繋げています．最後に，正解のマスク画像とそのまま比較しやすいように，画像の形にreshapeして返しています．つまり，1次元配列を2次元配列に変形しています．\n",
        "\n",
        "ここで，出力のチャンネル数は1で,各ピクセルが左心室である確率を表します."
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "usGCNgiRSprY"
      },
      "cell_type": "markdown",
      "source": [
        "### Trainerの定義\n",
        "\n",
        "次にTrainerを定義しましょう．`Trainer`オブジェクトを作成して返してくれる`create_trainer`関数を定義しましょう．各引数の定義は以下の通りです‥\n",
        "\n",
        "- ミニバッチサイズ（batchsize）\n",
        "- 学習用データセット（train）\n",
        "- 検証用データセット（val）\n",
        "- 学習を停止するタイミング（stop）\n",
        "- 使用するデバイス（device）← `-1`にするとCPU，`>=0`の場合はそのIDを持つGPU\n",
        "\n",
        "以下のセルを実行してください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "tnzh7wZySpra",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from chainer import iterators\n",
        "from chainer import training\n",
        "from chainer import optimizers\n",
        "from chainer.training import extensions\n",
        "\n",
        "def create_trainer(batchsize, train, val, stop, device=-1):\n",
        "    # 先程定義したモデルを使用\n",
        "    model = MultiLayerPerceptron(out_h=256, out_w=256)\n",
        "    \n",
        "    # ピクセルごとの二値分類なので，目的関数にSigmoid cross entropyを，\n",
        "    # 精度をはかる関数としてBinary accuracyを指定しています\n",
        "    train_model = L.Classifier(\n",
        "        model, lossfun=F.sigmoid_cross_entropy, accfun=F.binary_accuracy)\n",
        "\n",
        "    # 最適化手法にAdamを使います\n",
        "    optimizer = optimizers.Adam()\n",
        "    optimizer.setup(train_model)\n",
        "\n",
        "    # データセットから，指定したバッチサイズ数のデータ点をまとめて取り出して返すイテレータを定義します\n",
        "    train_iter = iterators.MultiprocessIterator(train, batchsize)\n",
        "    val_iter = iterators.MultiprocessIterator(val, batchsize, repeat=False, shuffle=False)\n",
        "    \n",
        "    # イテレータからデータを引き出し，モデルに渡して，目的関数の値を計算し，backwardしてパラメータを更新，\n",
        "    # までの一連の処理を行う updater を定義します\n",
        "    updater = training.StandardUpdater(train_iter, optimizer, device=device)\n",
        "    \n",
        "    # 様々な付加機能をExtensionとして与えられるTrainerを使います\n",
        "    trainer = training.trainer.Trainer(updater, stop)\n",
        "    \n",
        "    logging_attributes = [\n",
        "        'epoch', 'main/loss', 'main/accuracy', 'val/main/loss', 'val/main/accuracy']\n",
        "    trainer.extend(extensions.LogReport(logging_attributes))\n",
        "    trainer.extend(extensions.PrintReport(logging_attributes))\n",
        "    trainer.extend(extensions.PlotReport(['main/loss', 'val/main/loss'], 'epoch', file_name='loss.png'))\n",
        "    trainer.extend(extensions.PlotReport(['main/accuracy', 'val/main/accuracy'], 'epoch', file_name='accuracy.png'))\n",
        "    trainer.extend(extensions.Evaluator(val_iter, optimizer.target, device=device), name='val')\n",
        "    \n",
        "    return trainer"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "Zw7vdytqSpre"
      },
      "cell_type": "markdown",
      "source": [
        "この関数定義の中の最後の方では，**複数の Extension を追加しています**．これらはログのファイルへの自動保存（`LogReport`）やその標準出力への表示（`PrintReport`），目的関数の値や精度のプロットの自動作成（`PlotReport`），指定したタイミングおきにvalidationデータで評価（`Evaluator`），などをしてくれる拡張機能です.\n",
        "\n",
        "この他にも様々な拡張機能が使える様になっています．こちらにある`Extension`の一覧から，使い方やできることを調べることができます： [Trainer extensions](https://docs.chainer.org/en/v2.0.2/reference/extensions.html)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "5nyc3T7jSprf"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習\n",
        "\n",
        "これで学習の準備ができました．\n",
        "あとは作成した`trainer`からrun()関数を呼び出すだけです.\n",
        "\n",
        "下のセルを実行してください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "fHzNmtxXSprg",
        "outputId": "1ca1b45f-82ab-445f-d286-b540014d4f56",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        }
      },
      "cell_type": "code",
      "source": [
        "%%time\n",
        "trainer = create_trainer(64, train, val, (20, 'epoch'), device=0)\n",
        "trainer.run()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/accuracy  val/main/loss  val/main/accuracy\n",
            "\u001b[J1           1.07581     0.516798       0.834639       0.543843           \n",
            "\u001b[J2           0.761529    0.56239        0.682265       0.589279           \n",
            "\u001b[J3           0.666893    0.602783       0.653431       0.619897           \n",
            "\u001b[J4           0.637235    0.638585       0.603788       0.671883           \n",
            "\u001b[J5           0.580645    0.694309       0.53242        0.732497           \n",
            "\u001b[J6           0.509947    0.749273       0.460417       0.782581           \n",
            "\u001b[J7           0.421605    0.80748        0.351002       0.84777            \n",
            "\u001b[J8           0.309099    0.869414       0.240649       0.902411           \n",
            "\u001b[J9           0.216996    0.913866       0.170115       0.93487            \n",
            "\u001b[J10          0.142725    0.947233       0.101438       0.963847           \n",
            "\u001b[J11          0.0836528   0.970636       0.062417       0.977995           \n",
            "\u001b[J12          0.0588484   0.979699       0.0471966      0.983107           \n",
            "\u001b[J13          0.0425286   0.984605       0.0371721      0.985732           \n",
            "\u001b[J14          0.0355021   0.986212       0.0327444      0.98684            \n",
            "\u001b[J15          0.0333073   0.986946       0.0311622      0.987126           \n",
            "\u001b[J16          0.0310483   0.987274       0.0300719      0.987187           \n",
            "\u001b[J17          0.0302659   0.987217       0.0294418      0.987269           \n",
            "\u001b[J18          0.0292555   0.987502       0.0291003      0.987321           \n",
            "\u001b[J19          0.0292788   0.987296       0.0287308      0.987367           \n",
            "\u001b[J20          0.0287091   0.987648       0.0286519      0.987243           \n",
            "CPU times: user 20.7 s, sys: 6.38 s, total: 27.1 s\n",
            "Wall time: 26 s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "BQY_JoQsSprj"
      },
      "cell_type": "markdown",
      "source": [
        "大体,学習に40秒程度かると思います.この時表示されたのは`PrintReport`というExtensionが出力したログの情報です．現在のエポック数，目的関数の値，精度（学習データセットに対してのものは`main/loss`, `main/accuracy`，検証データセットに対してのものは`val/main/loss`, `val/main/accuracy`）が表示されています．\n",
        "\n",
        "それでは次に，`PlotReport`拡張が出力したグラフを見てみましょう．学習が終了したら，以下の2つのセルを実行してみてください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "gSe9PO7DSprk",
        "outputId": "5f373419-c99d-42bd-ce94-44e92f0f10ff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "from IPython.display import Image\n",
        "Image('result/loss.png')"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\nH+b555/n9ddfZ+zYsfz9738H4P777+exxx5j0aJFjBgxgm+++QaoW53oscceIykpiZ07d5KamurO\nv66ItFHaAxaPk5yczL59+5g1axYA5eXlZGdnExISwsCBAwEYNmwY//3vf9m7dy/h4eFER0cDMHLk\nSN566y0KCgooKSmhb9++AFx77bVA3TnghIQE/Pz8gLrFEkpLS138NxQRT6AAFo/j7e3NhAkTGiyb\nt3//fi677LL626ZpYhhGo0PHx97f1Cytv5zMX7O5isivoUPQ4nGGDRvGt99+y+HDhwFYvHgxubm5\nFBcX1y/IvnHjRvr160ePHj3Iz8/n4MGDAKxevZrBgwcTGhpKSEgIKSkpALz66qssXrzYPX8hEfFI\n2gMWj5OQkMDVV1/NzJkz8fHxITIyklGjRhEVFUVSUhJPPPEEpmnyzDPP4Ovry7x587j77rvx9vbG\n39+/fsWcp556ivnz52Oz2QgKCuKpp57i008/dfPfTkQ8hVZDknZh//79XHXVVXz77bfubkVEBNAh\naBEREbfQHrCIiIgbaA9YRETEDRTAIiIibqAAFhERcQMFsIiIiBsogEVERNzg/wMp6OCY2D57PwAA\nAABJRU5ErkJggg==\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "lvnccpd5Sprl",
        "outputId": "3a458e9e-08d1-45ea-a3bb-014f730cd9ac",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "cell_type": "code",
      "source": [
        "Image('result/accuracy.png')"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfYAAAEGCAYAAACXebelAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3Xd8FHX+x/HXlvSEFNLoJYQWCEWK\nyImAQQRFVIogYMOux+npecp5Pzw5e7lTz/MUG1IEpSggGgTBghAUaUkoIUAglHRCerK78/sDjcTs\nAmqyae/n4+EjOzOf2f3ssu57Z3ZmvibDMAxERESkUTDXdQMiIiJScxTsIiIijYiCXUREpBFRsIuI\niDQiCnYREZFGxOruB8zKKnD3Q4qINHhhYQF13YI0ENpiFxERaUTOK9j37dtHXFwc8+fPr7bs22+/\nZfz48Vx33XW8+uqrNd6giIiInL9zBntxcTGzZ89m0KBBTpf/85//5JVXXuH9999n48aN7N+/v8ab\nFBERkfNzzmD39PRkzpw5hIeHV1t25MgRAgMDadGiBWazmUsuuYRNmzbVSqMiIiJybucMdqvVire3\nt9NlWVlZhISEVE6HhISQlZVVc92JiEiT9sYbb7Bt27az1vztb38jNTXVTR3Vf24/Kl5EROR83X77\n7eesSU1NJSoqyg3dNAy/K9jDw8PJzs6unM7IyHC6y15ERGTZsmV899135OXlkZKSwv3338+qVatI\nTU3l+eefZ/Xq1ezcuZOysjImT57MhAkTePjhhxk5ciR5eXls3bqV3NxcDh48yPTp05kwYQLHjx+n\nRYsWADz11FPV1j969CgPP/wwdrudli1b8swzz3DixIlq8/72t78xcuRIhg0bxvr164mPj+fee+/l\nL3/5C76+vkydOpWCggLmz5+P2WwmOjqa2bNnU1FRwcMPP8zRo0fx8vLi2Wef5d577+WFF16gbdu2\nnDhxgrvvvptly5a57XX+XcHeunVrCgsLSU9PJzIykvXr1/P888/XVG8iIlJL3l6ZxMYdR2v0Pgf3\nasUtY2LOWnPo0CEWLlzIhx9+yOuvv85HH33EsmXLWLp0KZ06deKRRx6htLSUuLg4JkyYUGXdffv2\nsWjRIg4dOsSf//xnJkyYQEJCAv3796esrIxWrVpVW/9f//oXN910E5deeinPPvssiYmJzJs3r9o8\n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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "2RPUAqyqSpro"
      },
      "cell_type": "markdown",
      "source": [
        "うまく学習が進んでいるようです．Training loss, Validation lossともにほぼ0近くまで下がっており，また両者のデータセットに対するAccuracyも最大の1に近づいていっています．\n",
        "\n",
        "これらのプロットは，Trainerの初期化の際に渡す`out`という引数で指定された場所に画像として保存されています．これは逐次更新されているので，実際には学習の途中でもその時点でのプロットを確認することができます．学習の進み具合を視覚的に確認するのに便利です．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "W5xg70FaSpro"
      },
      "cell_type": "markdown",
      "source": [
        "### 評価\n",
        "\n",
        "さて，ここまでの結果をみると学習や検証データに対する性能は一見良好のようにみえます．特にAccuracyは最大値の1に近い値となっていました．しかし，この指標はどういう指標なのでしょうか？何をもって「精度（Accuracy）」と言っていたのでしょうか．\n",
        "\n",
        "一般的にSemantic Segmentationの結果は上で「accuracy」と表示されていた**Pixel accuracy**や，それとは異なる指標である**Mean Intersection over Union (mIoU)**といった値で評価が行われます．それぞれの定義は以下のようになっています．\n",
        "\n",
        "正解クラスが$i$であるピクセルをモデルがクラス$j$に分類した数を$N_{ij}$とすると，クラス数が $k$ のとき\n",
        "\n",
        "$$\n",
        "{\\rm Pixel\\ Accuracy} = \\frac{\\sum_{i=1}^k N_{ii}}{\\sum_{i=1}^k \\sum_{j=1}^k N_{ij}}\n",
        "$$\n",
        "\n",
        "$$\n",
        "{\\rm mIoU} = \\frac{1}{k} \\sum_{i=1}^k \\frac{N_{ii}}{\\sum_{j=1}^k N_{ij} + \\sum_{j=1}^k N_{ji} - N_{ii}}\n",
        "$$\n",
        "\n",
        "です．では，改めてこの2つの値をValidationデータセットに対して，**今学習したモデルを使って計算してみましょう．**\n",
        "\n",
        "今回は，これらの値を計算するために，[ChainerCV](https://github.com/chainer/chainercv) [11]を用います．ChainerCVはコンピュータビジョンタスクで頻出する計算やモデル・データ等の扱いを統一的に行えるChainerの追加パッケージです．上の2つの指標をあらためて計算するために，ChainerCVが提供するSemantic Segmentationタスク用の評価指標計算のための関数を用いてみましょう．\n",
        "\n",
        "以下のセルを実行してください．\n",
        "\n",
        "[11] Yusuke Niitani, Toru Ogawa, Shunta Saito, Masaki Saito, \"ChainerCV: a Library for Deep Learning in Computer Vision\", ACM Multimedia (ACMMM), Open Source Software Competition, 2017"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "2weVbMguSpro",
        "outputId": "c8a6f0f6-fdab-45f7-9d41-1cc2f46f1eab",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        }
      },
      "cell_type": "code",
      "source": [
        "from chainer import cuda\n",
        "from chainercv import evaluations\n",
        "\n",
        "def evaluate(trainer, val, device=-1):\n",
        "    # Trainerオブジェクトから学習済みモデルを取り出す\n",
        "    model = trainer.updater.get_optimizer('main').target.predictor\n",
        "\n",
        "    # validationデータ全部に対して予測を行う\n",
        "    preds = []\n",
        "    for img, label in val:\n",
        "        img = cuda.to_gpu(img[np.newaxis], device)\n",
        "        pred = model(img)\n",
        "        pred = cuda.to_cpu(pred.data[0, 0] > 0)\n",
        "        preds.append((pred, label[0]))\n",
        "    pred_labels, gt_labels = zip(*preds)\n",
        "\n",
        "    # 評価をして結果を表示\n",
        "    evals = evaluations.eval_semantic_segmentation(pred_labels, gt_labels)\n",
        "    print('Pixel Accuracy:', evals['pixel_accuracy'])\n",
        "    print('mIoU:', evals['miou'])\n",
        "    \n",
        "evaluate(trainer, val, device=0)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Pixel Accuracy: 0.9872430654672476\n",
            "mIoU: 0.6810346076820649\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "ca5XvESYSprq"
      },
      "cell_type": "markdown",
      "source": [
        "2つの数字が表示されました．\n",
        "\n",
        "Pixel Accuracyの値は`PrintReport`が表示した val/main/accuracy と同じ値になっています．学習中に\"accuracy\"として表示していたものは，Pixel Accuracyと同じものでした．こちらは，とても高い値を示しています．最大値が1であるので0.98というのは高い数値です．\n",
        "\n",
        "一方で，同じ最大値1の指標であるmIoU（`miou`）が思ったより低いことが分かります．なぜでしょうか．\n",
        "\n",
        "Pixel Accuracyは画像全体の画素数に対して，true positive + true negative（つまり，黒を黒，白を白と当てられた合計数） の割合を見るため，画像全体に対して negative (\n",
        "黒）が多い場合は true positive （白を当てられた数）が小さくてもtrue negativeが大きければ結果としてPixel Accuracyは高い値になります．つまり，**class imbalance（白と黒の数が大きく違う）が起きている際に，少ないクラスへの予測誤差の影響が相対的に小さくなる**ということです．\n",
        "\n",
        "一方，mIoU の場合は，予測と正解の両画像における「positiveとtrueの和領域」（白と予測した部分と，白が正解である領域の和）に対する「true positive」（白という予測が正解していた領域）の割合を見るので，画像全体の大きさに影響されません．わかりやすく図にすると，以下のようになります．\n",
        "\n",
        "![IoUで求める領域](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/miou.png)\n",
        "\n",
        "この図の言葉で書くと，IoUは，\n",
        "\n",
        "$$IoU = \\frac{\\rm true\\_positive}{{\\rm positive} + {\\rm true} - {\\rm true\\_positive}}$$\n",
        "\n",
        "となります．true_positiveはTrue Positiveのピクセル数，positiveは予測画像中で1の値をとるピクセル数，trueは正解画像中で1の値をとるピクセル数です．\n",
        "\n",
        "では，実際に得られたモデルを使って validation データに予測を行った結果を可視化して，**「Pixel Accuracy は高いが mIoU が低い」ことの問題を確認してみましょう**．以下のセルを実行してください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "atA-a3U2Sprr",
        "outputId": "4668e4b0-31f6-454e-8fb1-372bd16c07c6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 578
        }
      },
      "cell_type": "code",
      "source": [
        "def show_predicts(trainer, val, device=-1, n_sample=3):\n",
        "    # Trainerオブジェクトから学習済みモデルを取り出す\n",
        "    model = trainer.updater.get_optimizer('main').target.predictor\n",
        "\n",
        "    for i in range(n_sample):\n",
        "        img, label = val[i]\n",
        "        img = cuda.to_gpu(img, device)\n",
        "        pred = model(img[np.newaxis])\n",
        "        pred = cuda.to_cpu(pred.data[0, 0] > 0)        \n",
        "        fig, axes = plt.subplots(1, 2)\n",
        "\n",
        "        axes[0].set_axis_off()\n",
        "        axes[0].imshow(pred, cmap='gray')\n",
        "\n",
        "        axes[1].set_axis_off()\n",
        "        axes[1].imshow(label[0], cmap='gray')\n",
        "\n",
        "        plt.show()\n",
        "\n",
        "show_predicts(trainer, val, device=0)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXUAAAC7CAYAAACaaA64AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAA5lJREFUeJzt3Ety2lAUQMG8lPe/5ZcR5TguFAzo\nd9Q9xoUGV4eLkDXmnL8AaPi99wEA8D6iDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4Q8rHn\nm48xPKOAVc05xx7va7ZZ273ZtqkDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOE\niDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SI\nOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6\nQIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkDIx94HAFzb\nnPO/rxljbHAkDTZ1YBdzzoeCfnstj7GpA5t6NtC3v7O1L7OpA5t5x8Zta18m6sAmxHgbog6czk+u\nx1+NqAOrWyvAwv6dqAOEiPrJ2EyAJW5pPKl7cb/d7jXndOsXl2DWv7Kpn8gt5Evbunt5ORrfLrcl\n6gd3+5X/JyeGk4irMfOfRP3AXhlUQw7XJOrAqlwK3JaoH5RNGx7ng+OTqAOrWzO6gv6VqB+QLR0e\nI+jfifoBvXNQfUBwFAK8DVEP808ZHM275nGMYbbvEPUwQ88RvRpkc71M1IFdiPM6PPvloMYYL10P\nd8JwBktz+vf8m+fHifqBPRt2JwAF5vg5Lr8EueMFrsumfnD/PkrXV1JgiU39JG4BF3JgiU39hIQd\nuMemDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoA\nIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAh\nog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGi\nDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIO\nECLqACFjzrn3MQDwJjZ1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1\ngBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAkD/25YF2QZfojwAAAABJRU5ErkJg\ngg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f5cdb035978>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXUAAAC7CAYAAACaaA64AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAA39JREFUeJzt3Mtu4kAQQNH0KP//yz2riZhIhIdN\n3L6cs2KBhBfFVZlHjznnBwANf46+AAD2I+oAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGf\nR774GMMZBbzUnHMc8bpmm1e7Nts2dYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1\ngBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWA\nEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQ\nUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBR\nBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgR9ZOZcx59CcDCPo++AO4z5/wYY3w9/m6M8d9z4EyuLSvm\n+XE29ZP4F+1rBJ2zujXX7k4fY1Nf3CMDfflcgWd1j862mb6PTX1hWzYU2w0re2Y+zfR9RB34VZaV\n1xL1RRle4BmiDhAi6gvaa0u37bOaPWbSXP9M1Be017f8fi0A70fUgV9j0Xg9UQcIEXXgVGz7PxP1\nRW0dXIMP70nUFzbGeCrOt86JgSNtWTgsK7eJ+uKe/Tu14Wdl5vN1HOi1uMvjdr8fveuNwZk9ckdp\n1u9nUz8JQ03Rrbl+9iPId2ZTPyFDTsnlPLsL3U7UgWWI+XY+fgEIEXWAEFEHCBF1gBBRBwgRdYAQ\nUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBR\nBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEH\nCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcI\nEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgZc86jrwGAndjUAUJEHSBE1AFCRB0g\nRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE\n1AFCRB0gRNQBQv4CuwJvgYOlX5wAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f5cdada3f28>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXUAAAC7CAYAAACaaA64AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAA75JREFUeJzt3MFu4jAUQFE86v//smeFFHWGtkBC\nzO05q6pCJYvnGzeEjDnnBYCGP2cfAAD7EXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gJCP\nM998jOEZBRxqzjnOeF+zzdFuzbadOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6\nQIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpA\niKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCI\nqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIio\nA4SIOkCIqAMvM+e8zDnPPoy0j7MPAOi6FfDPvx9jvOJwfgVRB3Z37258+3qBf46oA7vZ49LK9W+I\n+2NcUweW5Nr7Y0T9zRl8VnHELJrv+4n6m7kO+fYuguvP2wVgMfBKR86bWb6PqL+RbcS/e80Yw2Ig\nwyz/nA9KF/fIMM85L2MMHzTxEoK7Fjv1hT2zWCw0asz0z4j6ogww/Mu6+J6oAw8T2fWIOvBWnEi+\nJuoAIaK+mD13IZ6Ix5HM1ppEfTF734botkaOYrbWJOphFh1V/ku4TdQBQkR9Uc/ssn2bFH4vUV+Y\nMLM6M7oeUV+Y64bwf04mt3mg18K2g3t9SNfnpzAabmDLTv1NXOMt4qzGTK5F1N+QwAO3iDrwtFdu\nMGxmvibqwC6Ojq1bdX9G1IHdiO753P0C7Ooa9r1uyXWiuI+dOnCIZ2Pscstj7NSBwzyyaxfy54g6\ncDihfh2XXwBCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQB\nQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFC\nRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJE\nHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAULGnPPsYwBgJ3bqACGiDhAi\n6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLq\nACGiDhAi6gAhog4QIuoAIX8BqvicaeYJeWgAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f5cdffd7518>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "uIPy6N-ISprs"
      },
      "cell_type": "markdown",
      "source": [
        "左の列が予測ラベルで，右の列が正解ラベルです．3行目に顕著なように，予測のpositive領域（白い領域）は正解の領域に対して小さくなっています．Pixel Accuracyは大部分を占めている黒い部分も含めての正解率ですので，Pixel Accuracyは評価指標として今回のようなデータセットにはあまり合っていない可能性があります．それに対し`mIoU`は今回のような画像中の予測対象領域の割合が少ない場合に有効な指標となります．\n",
        "\n",
        "以降は，どうやって`mIoU`を改善するかに取り組んでみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "QwYIGRnmSprv"
      },
      "cell_type": "markdown",
      "source": [
        "## 畳み込みネットワークを用いたセグメンテーション\n",
        "\n",
        "mIoU改善のため，モデルを全結合層のみから構成されるものから，画像関連のタスクで多く用いられる，畳み込み層を用います．それに加えてより深い（層数の多い）モデルに変えてみましょう．今回用いるLinkは，`Convolution2D`と`Deconvolution2D`の2つだけです．それぞれ，カーネルサイズ（`ksize`），ストライド（`stride`），パディング（`pad`）を指定することができます．これらがどのように出力を変化させるかを，まずはまとめてみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "7gK3nG-cSprv"
      },
      "cell_type": "markdown",
      "source": [
        "### Convolutionレイヤ\n",
        "\n",
        "`Convolution2D`というLinkは，一般的な畳込みレイヤの実装です．Convolutionがどのようなレイヤかは前章で説明しました．畳み込み層のパラメータを設定する際には，以下の点を知っておくと便利です．\n",
        "\n",
        "- paddingを使って計算後の出力サイズを維持しやすくするために，奇数のカーネルサイズにする（$\\lfloor {\\rm ksize} / 2 \\rfloor$をpadに指定すると，stride=1の際に画像サイズが変わらなくなる）\n",
        "- 出力feature mapを縮小したい場合は，>1の値をstrideに与える（stride=nだと変換後の画像の縦横はそれぞれ元の1/nになる）\n",
        "- 出力サイズは，$({\\rm input\\_size} + {\\rm pad} \\times 2) / {\\rm stride} + 1$になる．つまり，strideを大きくすると出力特徴マップは小さくなる．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "D5pnY7NrSprw"
      },
      "cell_type": "markdown",
      "source": [
        "### Deconvolutionレイヤ\n",
        "\n",
        "`Deconvolution2D`は，歴史的な経緯からその名とは異なり数学的な意味でのdeconvolutionではありません．実際に適用している操作からTransposed convolutionや，Backward convolutionとよばれることもあります．Deconvolution2Dはフィルタの適用の仕方はConvolutionと同じですが入力特徴マップの値を飛び飛びに配置するなどの処理が入る部分が異なる処理のことです．`Deconvolution2D`レイヤのパラメータを設定する際には，以下の点を知っておくと便利です．\n",
        "\n",
        "- カーネルサイズをstrideで割り切れる数にする（checker board artifactを防ぐため．こちらを参考のこと：[Deconvolution and Checkerboard Artifacts](https://distill.pub/2016/deconv-checkerboard/)）\n",
        "- 出力サイズは，${\\rm stride} \\times ({\\rm input\\_size} - 1) + {\\rm ksize} - 2 \\times {\\rm pad}$となるので，目的の拡大後サイズになるようパラメータを調整する\n",
        "\n",
        "Deconvolution2Dにおいては，padが意味するものが少し直感的でないため，実際に行われる操作を説明した図を以下に用意しています．\n",
        "\n",
        "![Deconvolution2Dの計算(pad=0の場合)](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/deconv_pad-0.png)\n",
        "\n",
        "![Deconvolution2Dの計算(pad=1の場合)](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/deconv_pad-1.png)\n",
        "\n",
        "気をつける点は，ksizeとstrideに従って配置・拡張したfeature mapの周囲を「削る量」がpadになっている点です．そのあと行われる演算自体はstride=1, pad=0のConvolutionと同じになります．\n",
        "\n",
        "こちらに，非常にわかりやすく各種Convolution/Deconvolutionの計算を表したGIFアニメがあるので，参考にしてください：[Convolution arithmetic](https://github.com/vdumoulin/conv_arithmetic)"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "7toHJo-ySprx"
      },
      "cell_type": "markdown",
      "source": [
        "### 全畳込みネットワーク\n",
        "\n",
        "それではConvolution層とDeconvolution層からなるネットワークをChainerで書いてみます．以下のモデルは，Fully Convolutional Networkと呼ばれるネットワークに類似したものです．詳しくはこちらの文献を参照してください [4], [5], [6]．\n",
        "\n",
        "以下のFullyConvolutionalNetworkというモデルの定義には，FIXME_1 ~ FIXME_5まで，5つの定数が含まれていますが，値が与えられていません．それぞれは，Convolutionの出力側のチャンネル数になります．試しにこれを，\n",
        "\n",
        "- FIXME_1 = 64\n",
        "- FIXME_2 = 128\n",
        "- FIXME_3 = 128\n",
        "- FIXME_4 = 128\n",
        "- FIXME_5 = 128\n",
        "\n",
        "と書き換えて，下のセルを実行してみましょう．入力チャンネル数は，`None`を与えておくと，実行時に自動的に決定してくれます．\n",
        "\n",
        "[4] http://fcn.berkeleyvision.org/\n",
        "\n",
        "[5] Long, Shelhamer, Darrell; \"Fully Convoutional Networks for Semantic Segmentation\", CVPR 2015.\n",
        "\n",
        "[6] Zeiler, Krishnan, Taylor, Fergus; \"Deconvolutional Networks\", CVPR 2010."
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "B7WGsingSprx",
        "outputId": "664598d5-71c6-473b-b05b-aaaa3cc6da39",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "cell_type": "code",
      "source": [
        "from chainer import reporter\n",
        "from chainer import cuda\n",
        "from chainercv import evaluations\n",
        "\n",
        "\n",
        "class FullyConvolutionalNetwork(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, out_h, out_w, n_class=1):\n",
        "        super().__init__()\n",
        "        with self.init_scope():\n",
        "            # L.Convolution2D(in_ch, out_ch, ksize, stride, pad)\n",
        "            # in_chは省略することができるので，\n",
        "            # L.Convolution2D(out_ch, ksize, stride, pad)\n",
        "            # とかくこともできます．\n",
        "            self.conv1 = L.Convolution2D(None, FIXME_1, ksize=5, stride=2, pad=2)\n",
        "            self.conv2 = L.Convolution2D(None, FIXME_2, ksize=5, stride=2, pad=2)\n",
        "            self.conv3 = L.Convolution2D(None, FIXME_3, ksize=3, stride=1, pad=1)\n",
        "            self.conv4 = L.Convolution2D(None, FIXME_4, ksize=3, stride=1, pad=1)\n",
        "            self.conv5 = L.Convolution2D(None, FIXME_5, ksize=1, stride=1, pad=0)\n",
        "            # L.Deconvolution2D(in_ch, out_ch, ksize, stride, pad)\n",
        "            # in_chは省略することができるので，\n",
        "            # L.Deconvolution2D(out_ch, ksize, stride, pad)\n",
        "            # と書くこともできます．\n",
        "            self.deconv6 = L.Deconvolution2D(None, n_class, ksize=32, stride=16, pad=8)\n",
        "        self.out_h = out_h\n",
        "        self.out_w = out_w\n",
        "    \n",
        "    def forward(self, x):\n",
        "        h = F.relu(self.conv1(x))\n",
        "        h = F.max_pooling_2d(h, 2, 2)\n",
        "        \n",
        "        h = F.relu(self.conv2(h))\n",
        "        h = F.max_pooling_2d(h, 2, 2)\n",
        "        \n",
        "        h = F.relu(self.conv3(h)) \n",
        "        h = F.relu(self.conv4(h))\n",
        "        h = self.conv5(h)\n",
        "        h = self.deconv6(h)\n",
        "        \n",
        "        return h.reshape(x.shape[0], 1, h.shape[2], h.shape[3])\n",
        "\n",
        "print(FullyConvolutionalNetwork(256, 256)(np.zeros((1, 1, 256, 256), dtype=np.float32)).shape[2:])\n"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(256, 256)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "j7-WbsG8Spry"
      },
      "cell_type": "markdown",
      "source": [
        "FIXME_1 ~ FIXME_5を定数に書き換えた上で上のセルを実行すると，ネットワークの出力サイズが表示されます．今回の入力画像は(256, 256)サイズの画像ですから，出力が256 x 256という同じ大きさになっていれば正しく動作しています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "6Ptqh2ghSpry"
      },
      "cell_type": "markdown",
      "source": [
        "### Classifierクラスの改良\n",
        "\n",
        "次に，学習中にチェックするものとして，Pixel AccuracyだけでなくmIOUも追加するために，目的関数を計算するClassifierクラスを，自分でカスタマイズしたものに置き換えます．それは，以下のように定義されます．下記のセルを実行してみましょう．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "ycDjvqQtSprz",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "class PixelwiseSigmoidClassifier(chainer.Chain):\n",
        "    \n",
        "    def __init__(self, predictor):\n",
        "        super().__init__()\n",
        "        with self.init_scope():\n",
        "            # 学習対象のモデルをpredictorとして保持しておく\n",
        "            self.predictor = predictor\n",
        "    \n",
        "    def __call__(self, x, t):\n",
        "        # 学習対象のモデルでまず推論を行う\n",
        "        y = self.predictor(x)\n",
        "        \n",
        "        # 2クラス分類の誤差を計算\n",
        "        loss = F.sigmoid_cross_entropy(y, t)\n",
        "\n",
        "        # 予測結果（0~1の連続値を持つグレースケール画像）を二値化し，\n",
        "        # ChainerCVのeval_semantic_segmentation関数に正解ラベルと\n",
        "        # 共に渡して各種スコアを計算\n",
        "        y, t = cuda.to_cpu(F.sigmoid(y).data), cuda.to_cpu(t)\n",
        "        y = np.asarray(y > 0.5, dtype=np.int32)\n",
        "        y, t = y[:, 0, ...], t[:, 0, ...]\n",
        "        evals = evaluations.eval_semantic_segmentation(y, t)\n",
        "\n",
        "        # 学習中のログに出力\n",
        "        reporter.report({'loss': loss,\n",
        "                         'miou': evals['miou'],\n",
        "                         'pa': evals['pixel_accuracy']}, self)\n",
        "        return loss"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "xc_ZaQbnSpr1"
      },
      "cell_type": "markdown",
      "source": [
        "Trainerは，Optimizerの引数として渡されたモデルが「目的関数の値を返す」関数であると考えます．最初のモデルではモデルは出力結果を返しましたが，それを`L.Classifier`というオブジェクトに渡した上でOptimizerに渡していました．Chainerが用意しているこの`L.Classifier`は，内部で目的関数の値だけでなくAccuracyも計算し，`reporter.report`に辞書を渡す形で`LogReport`などのExtensionが補足できるように値の報告を行います．\n",
        "しかし，`L.Classifier`はmIoUの計算をしてくれません．\n",
        "\n",
        "そこで，今回は`L.Classifier`を自前の`PixelwiseSigmoidClassifier`に置き換え，自分で実際の目的関数となる`F.sigmoid_cross_entropy`の計算を書きつつ，予測（上記コード中の`y`）に対してPixel AccuracyとmIoUの両方を計算して，報告するようにします．`__call__`自体は目的関数の値（スカラ）を返すことが期待されているので，`F.sigmoid_cross_entropy`の返り値である`loss`だけを`return`しています．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "4o7iJhNZSpr1"
      },
      "cell_type": "markdown",
      "source": [
        "### 新しいモデルを使った学習\n",
        "\n",
        "では，これらのモデルとカスタムClassifierを使って，Trainerによる学習を行ってみましょう．以下のセルを実行してください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "VOwxiL8fSpr2",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def create_trainer(batchsize, train, val, stop, device=-1, log_trigger=(1, 'epoch')):\n",
        "    model = FullyConvolutionalNetwork(out_h=256, out_w=256)    \n",
        "    train_model = PixelwiseSigmoidClassifier(model)\n",
        "    \n",
        "    optimizer = optimizers.Adam(eps=1e-05)\n",
        "    optimizer.setup(train_model)\n",
        "\n",
        "    train_iter = iterators.MultiprocessIterator(train, batchsize)\n",
        "    val_iter = iterators.MultiprocessIterator(val, batchsize, repeat=False, shuffle=False)\n",
        "    \n",
        "    updater = training.StandardUpdater(train_iter, optimizer, device=device)\n",
        "    \n",
        "    trainer = training.trainer.Trainer(updater, stop, out='result_fcn')\n",
        "    \n",
        "    logging_attributes = [\n",
        "        'epoch', 'main/loss', 'main/miou', 'main/pa',\n",
        "        'val/main/loss', 'val/main/miou', 'val/main/pa']\n",
        "    trainer.extend(extensions.LogReport(logging_attributes), trigger=log_trigger)\n",
        "    trainer.extend(extensions.PrintReport(logging_attributes), trigger=log_trigger)\n",
        "    trainer.extend(extensions.PlotReport(['main/loss', 'val/main/loss'], 'epoch', file_name='loss.png'))\n",
        "    trainer.extend(extensions.PlotReport(['main/miou', 'val/main/miou'], 'epoch', file_name='miou.png'))\n",
        "    trainer.extend(extensions.PlotReport(['main/pa', 'val/main/pa'], 'epoch', file_name='pa.png'))\n",
        "    trainer.extend(extensions.Evaluator(val_iter, train_model, device=device), name='val')\n",
        "    trainer.extend(extensions.dump_graph('main/loss'))\n",
        "    return trainer"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "cy11SO2WSpr4"
      },
      "cell_type": "markdown",
      "source": [
        "これが今回用いるTrainerオブジェクトを作成する関数です．最初のケースと違うところは，ログをファイルに記録する`LogReport`や標準出力にログを指定項目を出力する`PrintReport`，またグラフを出力する`PlotReport`拡張で`loss`と`accuracy`（ここでは`pa`=Pixel Accuracy）だけでなく`miou`も出力しているところです．\n",
        "\n",
        "それでは学習を開始します．最初のモデルではmiouが0.68強までしかいかなかったことを思い出しつつ，経過を見てみましょう．今回はモデルが大きくなりパラメータ数も増えているため，少し学習に時間がかかります（6分強かかります）\n",
        "\n",
        "下記のセルを実行してください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "7cGbGTEWSpr4",
        "outputId": "7fc208a8-5341-44c8-aced-9228e0a6e89c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        }
      },
      "cell_type": "code",
      "source": [
        "%%time\n",
        "trainer = create_trainer(128, train, val, (200, 'epoch'), device=0, log_trigger=(10, 'epoch'))\n",
        "trainer.run()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "epoch       main/loss   main/miou   main/pa     val/main/loss  val/main/miou  val/main/pa\n",
            "\u001b[J10          0.234251    0.491308    0.982615    0.210242       0.491116       0.982231     \n",
            "\u001b[J20          0.0734951   0.491697    0.983393    0.0785704      0.491152       0.982304     \n",
            "\u001b[J30          0.0437268   0.494095    0.984806    0.0551604      0.491449       0.982302     \n",
            "\u001b[J40          0.0408295   0.594572    0.98537     0.0461075      0.529961       0.98318      \n",
            "\u001b[J50          0.0365125   0.688635    0.988101    0.040564       0.574938       0.984732     \n",
            "\u001b[J60          0.027403    0.695415    0.989981    0.0332343      0.642126       0.987183     \n",
            "\u001b[J70          0.0217707   0.759634    0.991624    0.0270782      0.76395        0.989708     \n",
            "\u001b[J80          0.0176617   0.799277    0.993182    0.0199791      0.812472       0.992117     \n",
            "\u001b[J90          0.0161867   0.80881     0.993526    0.0177032      0.833391       0.992866     \n",
            "\u001b[J100         0.0130744   0.844841    0.994593    0.0153165      0.849115       0.993659     \n",
            "\u001b[J110         0.0118144   0.858881    0.995321    0.0134715      0.848127       0.994422     \n",
            "\u001b[J120         0.0116768   0.869053    0.995233    0.0148684      0.859756       0.993897     \n",
            "\u001b[J130         0.00874199  0.890274    0.996529    0.0119417      0.877572       0.995053     \n",
            "\u001b[J140         0.0094416   0.877748    0.995952    0.0108778      0.884067       0.995451     \n",
            "\u001b[J150         0.00775642  0.90301     0.996792    0.0104386      0.886378       0.995703     \n",
            "\u001b[J160         0.00732858  0.921296    0.997036    0.0102071      0.890742       0.995758     \n",
            "\u001b[J170         0.00690384  0.915666    0.99711     0.0110711      0.888528       0.995451     \n",
            "\u001b[J180         0.00575131  0.931005    0.997664    0.00980079     0.895453       0.995955     \n",
            "\u001b[J190         0.00626531  0.916989    0.99736     0.00958781     0.897156       0.996084     \n",
            "\u001b[J200         0.00600236  0.923304    0.997401    0.0103913      0.894893       0.995797     \n",
            "CPU times: user 4min 52s, sys: 1min 52s, total: 6min 44s\n",
            "Wall time: 5min 37s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "nwL-7kLzSpr5"
      },
      "cell_type": "markdown",
      "source": [
        "学習が終了しました．`PrintReport`が出力した経過の値を見る限り，mIoUが少なくとも0.90近くまで到達していることがわかります．"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "q7d7QqRqSpr6"
      },
      "cell_type": "markdown",
      "source": [
        "### 学習結果を見てみよう\n",
        "\n",
        "では，今回の学習で`PlotReport`拡張が出力したグラフを見てみましょう．下記の3つのセルを実行してください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "d4QamN-YSpr6",
        "outputId": "7087c5e8-ca01-4174-dca9-832a517c69c5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "cell_type": "code",
      "source": [
        "from IPython.display import Image\n",
        "print('Loss')\n",
        "Image('result_fcn/loss.png')"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Loss\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "swNzUUkqSpr8",
        "outputId": "740d9ecb-00a2-42b8-c373-0401063d62ec",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "cell_type": "code",
      "source": [
        "print('mean IoU')\n",
        "Image('result_fcn/miou.png')"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "mean IoU\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\niTfeeAOAl156iXXr1rFr1y7GjBnDZ599Btx4sta6desoKyvj22+/pba21pdvV0QsQitksZyqqip+\n/PFHMjIygBv3ML5w4QKRkZHEx8cDN27LunPnTr7//nv69OlD3759ARg7dix79uyhsbGR5uZmhg4d\nCkBmZiZw4zPkhIQEwsLCgBsP9mhpafHyOxQRK1Ihi+WEhISQnJzc5TGY58+fJzU11X1sGAY2m+22\nreZbz/+nu8oGBgbe9mdERP5X2rIWy0lMTOTIkSO0tbUBUFJSQkNDA01NTXz99dcAVFdXM2zYMAYO\nHMilS5f4+eefAaisrGTUqFFERUURGRnJyZMnAdixYwclJSW+eUMi8regFbJYTkJCArNnz2bOnDn0\n6tULh8PBgw8+SGxsLGVlZaxfvx7DMHjttdcIDQ2loKCA5cuXExISQnh4OAUFBQAUFRVRWFhIUFAQ\ndrudoqIiDh486ON3JyJWpac9yd/C+fPneeGFFzhy5Iivo4iIdEtb1iIiIiagFbKIiIgJaIUsIiJi\nAipkERERE1Ahi4iImIAKWURExARUyCIiIibwT+GIYNhJVR7TAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "Vo6EPBfdSpr9",
        "outputId": "0a807603-bd6b-436a-dee3-f28d002d0506",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "cell_type": "code",
      "source": [
        "print('Pixel Accuracy')\n",
        "Image('result_fcn/pa.png')"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Pixel Accuracy\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "CnVA6KwQSpr_"
      },
      "cell_type": "markdown",
      "source": [
        "Pixel Accuracyが0.99以上であるだけでなく，mIoUも0.90近くまで上がっています．mIoUに注目すると，最初のモデル（0.68程度）と比べて随分精度が上がっていることがわかると思います．実際にvalidationデータに対して推論を行った際の予測ラベル画像を見て，結果を確認しましょう．以下のセルを実行してください．"
      ]
    },
    {
      "metadata": {
        "colab_type": "code",
        "id": "pkfCHRZOSpr_",
        "outputId": "5ddf6a70-ca4a-41b3-dc2b-e0e3ba6ecca3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 614
        }
      },
      "cell_type": "code",
      "source": [
        "evaluate(trainer, val, device=0)\n",
        "show_predicts(trainer, val, device=0, )"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Pixel Accuracy: 0.9957967904897836\n",
            "mIoU: 0.8948934203314065\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXUAAAC7CAYAAACaaA64AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAA7ZJREFUeJzt3cFOIkEARVFq4v//cs2KUXFEQJou\nLuesjAmhF6+vlcbomHMeAGj4s/cFAHA/og4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOEPK2\n55uPMfyNAjY15xx7vK9ts7Xvtu2kDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIO\nECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4Q\nIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGiDhAi\n6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4QIuoAIaIOECLqACGiDhAi6gAhog4Q8rb3BfCzOefh\ncDgcxhj/vj4aY+xxScCiRH1Rp/H+6XvizrP6365P2fflPH5Z0CUj/+h4gr/2dbCnazZr25dzUl/I\nrcP9+Lo5p1MNS/vtzu37PCf1RdzzJOLUzqrusUvbPk/UgYcQ48cQ9TAndqps+3uivgDjpG6rjbt3\nvhL1BfjgB7gXUV/A1qcNpxl4HaK+ACd1uJ1Dy2eiDmxKdB9L1Bex9WndbwtQZtvvRP3FGD+0ifpC\nPFunyK4fS9SBp+cHxztRX4xxUrTlrt0zn4n6gh7xoSkUCPpXor4oY6XGph9D1F+Qm4u93Gt7Yww7\n/oaoAw/12yCL+XmivrAtxuuGYBW2uA3/zm5xx+H/9sNNNxArOrfLj5u338uJ+pO4Ne5uBp6V7d7G\n45cnc83Q3RTwepzUn9DpqV28gSNRf2JiDpzy+AUgRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQd\nIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0g\nRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE\n1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETU\nAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gZMw5974GAO7ESR0gRNQBQkQdIETUAUJE\nHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQd\nIETUAUJEHSDkL6g8kHyMlbmJAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f5cdfee09e8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXUAAAC7CAYAAACaaA64AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAA2xJREFUeJzt3ctO40AARcHpEf//y80KiUGTEDsP\nt0+qNmyQ4sX1UWMlYcw5/wDQ8PfoCwDgcUQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSDk\n48gXH2P4jgKeas45jnhd2+bZLm3bSR0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJE\nHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQd\nIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0g\nRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE\n1AFCRB0gRNQBQkQdIETUAUJEHSBE1E9kzvnPT4CfPo6+AK77GfD/hX2M8dJrAtYl6gu79UT+9Xvi\nzlld2rpNb+fxC3Coa4eXOafHjRuJeojxcyZbgm3btxP1Re0dsZMNZ7Bno3Z9G1EHXuqeOAv770Q9\nyvjhPYk6QIioL8gpm6pHbNv9cZ2oA4SI+oJ84IIq234+UV+QPy+BvUR9QU4zcJn74zpRX9S9wzV8\neE+iDrzUPQcOh5XfifrCxhi7Rmz4rM5Gn0fUT2BL3N0snMWWre494Lwj36d+IkZNzRjj6ru9bH47\nUQcO9T3c/uHL/UQdWIaY388zdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBR\nBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEH\nCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcI\nEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgR\ndYAQUQcIEXWAEFEHCBF1gJAx5zz6GgB4ECd1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQ\nUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAkE9ZAGZ1ngZ0\ntgAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f5cc413a5c0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXUAAAC7CAYAAACaaA64AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAA89JREFUeJzt3MFO20AARVFc8f+/PF0hIdoAcWzP\n5OacJaqKF28uE6t0G2O8AdDwZ/YDAHAcUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCHmf\n+c23bfN/FHCqMcY24/vaNme7tW03dYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1\ngBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWA\nEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQ\nUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBRBwgRdYAQUQcIEXWAEFEHCBF1gBBR\nBwgRdYAQUQcuM8Z4G2PMfoy099kPwL9+Gv22bRc9CTzm1pa/ft2mjyPqk+25tTgQrO7eXX/+8/b8\nGFGf5MiPoGMMB4ElHLHrj7/DpvfxTj3Ce0pqbHofUZ/grLE6BMx0xv5s+n6iHuNfFzDDmZuz5/uI\nOrA8Yf89Ub/YVeN0CLiKra1F1C/itQg8xvn5HVEPcwiosemfiTqwm8iuR9TjHDpqbPp7oh7nt/Lg\ntYj6BdwsKLLrNYl6nIPHWXwKXJOoA0/HZeU2UQcIEfULzPyY6iMyvBZRB3ZzaViPqANPxw+T20T9\nIjNGaPjwekT9QiJLkV2vRdQv5gAAZxJ14GFXXlZcjL4n6hNcMUrD52pnb27bNrv+BVGfxDgpsuv5\n3mc/wCv7OABH/8qzg8VMR+/anu/jpr6AIz9WOgCs4tEtet2yj6gvxICp2RNmMX+M1y+LOeuVDMwk\n0tdxU1/U3hsO8NpEfXFCDdzD65cn8DXsYwyxB/7LTf0JCTpwi6gDhIg6QIioA4SIOkCIqAOEiDpA\niKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCI\nqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIio\nA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgDhIg6QIioA4SIOkCIqAOEiDpAiKgD\nhGxjjNnPAMBB3NQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFCRB0gRNQBQkQd\nIETUAUJEHSBE1AFCRB0gRNQBQkQdIETUAUJEHSBE1AFC/gJqspCSVJyU3wAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f5cc3bc8e48>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "NKs1onagSpsB"
      },
      "cell_type": "markdown",
      "source": [
        "一つ目のモデルの結果を確認した際と同じ画像が3つ並べられています．一つ目の結果よりも，特に3行目に注目すると，だいぶ正解ラベルに近い形のマスクを推定できていることがわかります．\n",
        "\n",
        "畳み込み層だけからなるより深いモデルを学習に用いることで，大きく結果を改善することができました．\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "YpnDxZ49SpsB"
      },
      "cell_type": "markdown",
      "source": [
        "## さらなる精度向上へのヒント\n",
        "\n",
        "今回のモデルでも十分うまくいっているようにみえますがまだ性能改善の余地があります.Semantic Segmentationでは，どうやって入力画像における広い範囲の情報を1つのピクセルの予測に役立てるか，どうやって複数の解像度における予測結果を考慮するか，などが重要な問題意識となります．また，ニューラルネットワークでは一般に，レイヤを重ねれば重ねるほど，特徴量の抽象度が上がっていくとされています．しかし，Semantic Segmentationでは，正確に対象物体の輪郭を表すマスク画像を出力したいので，low levelな情報（エッジ・局所的な画素値勾配のような情報，色の一貫性など）も考慮して最終的な予測結果を作りたくなります．そのために，ネットワークの出力に近いレイヤでどうやって入力に近いレイヤで取り出された特徴を活用すればよいか，が重要になってきます．\n",
        "\n",
        "これらの視点からいくつもの新しいモデルが提案されています．代表的なものを挙げると，例えば以下のようなものがあります．\n",
        "\n",
        "### SegNet [8]\n",
        "\n",
        "各層でMax Poolingを適用した際に「どのピクセルが最大値だったか（pooling indices)\n",
        "」の情報をとっておき，後で画像を拡大していく時に記録しておいたpooling indicesを使ってUpsamplingする手法です．[ChainerCV](https://github.com/chainer/chainercv)にてChainerで実装されたモデル及び完全な再現実験を含むコードが公開されています．\n",
        "\n",
        "![SegNet](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/SegNet.png)\n",
        "\n",
        "### U-Net [9]\n",
        "\n",
        "下層の出力特徴マップを，上層の入力に結合することで活用する構造．全体がアルファベットの \"U\" のような形をしていることから「U-Net」とよばれます.セグメンテーションタスクで広く使われています.\n",
        "\n",
        "![U-Net](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/U-Net.png)\n",
        "\n",
        "### PSPNet [10]\n",
        "\n",
        "異なる大きさのsub-regionごとの特徴を大域的なコンテキストを考慮するために活用することで，ImageNet 2017 Scene Parsing Challengeで優勝したモデルです.\n",
        "\n",
        "![PSPNet](https://github.com/mitmul/chainer-handson/raw/master/segmentation-handson/PSPNet.png)\n",
        "\n",
        "この他に様々な手法が提案されています.例えばクラス間のサンプル数の大小だけでなく，難しいクラスと簡単なクラスがある場合にそれらを考慮した損失関数を使うことで性能をあげることができます．\n",
        "\n",
        "また，今回は簡単のためtraining splitとvalidation splitのみを持つデータセットを使いましたが，本来はハイパーパラメータをvalidation splitでの検証結果を用いて調整したあと，最終的な性能を評価する段階でtest splitを使うべきです．\n",
        "\n",
        "[8] Vijay Badrinarayanan, Alex Kendall and Roberto Cipolla \"SegNet: A Deep Convolutional Encoder-Decoder Architecture for Image Segmentation.\" PAMI, 2017\n",
        "\n",
        "[9] Olaf Ronneberger, Philipp Fischer, Thomas Brox, \"U-Net: Convolutional Networks for Biomedical Image Segmentation\", MICCAI 2015\n",
        "\n",
        "[10] Hengshuang Zhao, Jianping Shi, Xiaojuan Qi, Xiaogang Wang and Jiaya Jia, \"Pyramid Scene Parsing Network\", CVPR 2017\n"
      ]
    },
    {
      "metadata": {
        "colab_type": "text",
        "id": "DCWZoBoCSpsC"
      },
      "cell_type": "markdown",
      "source": [
        "## その他の参考資料\n",
        "\n",
        "最後に，本資料作成者によるいくつかのセグメンテーションに関する資料をここに載せます．\n",
        "\n",
        "- [最近のセグメンテーション手法の簡単な紹介](https://www.slideshare.net/mitmul/a-brief-introduction-to-recent-segmentation-methods)\n",
        "- [Pyramid Scene Parsing Network (CVPR 2017)の紹介](https://www.slideshare.net/mitmul/unofficial-pyramid-scene-parsing-network-cvpr-2017)\n",
        "\n",
        "また，以下のレビュー論文も昨今のDeep learningを活用したセグメンテーション手法についてよくまとまっており，参考になります．\n",
        "\n",
        "- [A Review on Deep Learning Techniques Applied to Semantic Segmentation](https://arxiv.org/abs/1704.06857)"
      ]
    }
  ]
}